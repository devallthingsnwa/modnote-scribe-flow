
import { corsHeaders, extractVideoId, validateVideoId, extractVideoTitle, extractChannelName } from "./utils.ts";
import { ContentParser } from "./contentParser.ts";

interface TranscriptOptions {
  language?: string;
  autoGenerated?: boolean;
  format?: 'json' | 'text' | 'srt' | 'vtt';
}

export class FallbackMethods {
  private contentParser: ContentParser;

  constructor() {
    this.contentParser = new ContentParser();
  }
  
  async tryAllMethods(videoUrl: string, options: TranscriptOptions = {}): Promise<Response | null> {
    const videoId = extractVideoId(videoUrl);
    
    if (!videoId || !validateVideoId(videoId)) {
      return this.createErrorResponse("Invalid YouTube video URL or ID", 400);
    }

    const methods = [
      () => this.methodYouTubeCaption(videoId, videoUrl, options),
      () => this.methodYouTubeWatch(videoId, videoUrl, options),
      () => this.methodYouTubeAPI(videoId, videoUrl, options),
      () => this.methodYouTubeEmbed(videoId, videoUrl, options)
    ];

    for (let i = 0; i < methods.length; i++) {
      try {
        console.log(`Trying fallback method ${i + 1}/${methods.length}`);
        const result = await methods[i]();
        
        if (result) {
          console.log(`Fallback method ${i + 1} successful`);
          return result;
        }
      } catch (error) {
        console.log(`Fallback method ${i + 1} failed:`, error.message);
      }
    }

    return this.createErrorResponse("No transcript available for this video", 404);
  }

  private async methodYouTubeCaption(videoId: string, videoUrl: string, options: TranscriptOptions): Promise<Response | null> {
    try {
      console.log("Attempting direct caption API...");
      
      const captionUrls = [
        `https://www.youtube.com/api/timedtext?v=${videoId}&lang=${options.language || 'en'}&fmt=srv3`,
        `https://www.youtube.com/api/timedtext?v=${videoId}&lang=en&fmt=srv3`,
        `https://www.youtube.com/api/timedtext?v=${videoId}&lang=en-US&fmt=srv3`,
        `https://www.youtube.com/api/timedtext?v=${videoId}&fmt=srv3`
      ];

      for (const url of captionUrls) {
        try {
          const response = await fetch(url, {
            headers: {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
          });

          if (response.ok) {
            const xmlContent = await response.text();
            
            if (xmlContent.includes('<text')) {
              // Get video metadata
              const { title, author } = await this.getVideoMetadata(videoId);
              
              const metadata = {
                videoId,
                title,
                author,
                url: videoUrl,
                language: options.language || 'en',
                extractionMethod: 'direct-caption-api'
              };
              
              return await this.contentParser.processTranscriptContent(
                xmlContent,
                'direct-caption-api',
                metadata
              );
            }
          }
        } catch (error) {
          console.log(`Caption URL failed: ${url}`, error.message);
        }
      }

      return null;
    } catch (error) {
      console.error("Caption API method failed:", error);
      return null;
    }
  }

  private async methodYouTubeWatch(videoId: string, videoUrl: string, options: TranscriptOptions): Promise<Response | null> {
    try {
      console.log("Attempting YouTube watch page scraping...");
      
      const watchUrl = `https://www.youtube.com/watch?v=${videoId}`;
      const response = await fetch(watchUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept-Language': 'en-US,en;q=0.9',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const html = await response.text();
      
      // Extract video metadata from HTML
      const title = extractVideoTitle(html);
      const author = extractChannelName(html);
      
      // Enhanced regex patterns for finding caption data
      const patterns = [
        /"captionTracks":\[([^\]]+)\]/,
        /"captions":\{"playerCaptionsTracklistRenderer":\{"captionTracks":\[([^\]]+)\]/,
        /\"captionTracks\":\[([^\]]*)\]/
      ];
      
      let captionTracks = null;
      
      for (const pattern of patterns) {
        const match = html.match(pattern);
        if (match) {
          try {
            captionTracks = JSON.parse(`[${match[1]}]`);
            break;
          } catch (e) {
            continue;
          }
        }
      }
      
      if (captionTracks && captionTracks.length > 0) {
        // Find preferred language track
        const preferredTrack = captionTracks.find((track: any) => 
          track.languageCode === (options.language || 'en')
        ) || captionTracks.find((track: any) => 
          track.languageCode === 'en'
        ) || captionTracks[0];
        
        if (preferredTrack && preferredTrack.baseUrl) {
          const captionResponse = await fetch(preferredTrack.baseUrl);
          const captionXml = await captionResponse.text();
          
          const metadata = {
            videoId,
            title,
            author,
            url: videoUrl,
            language: preferredTrack.languageCode || 'en',
            extractionMethod: 'youtube-watch-scraping'
          };
          
          return await this.contentParser.processTranscriptContent(
            captionXml,
            'youtube-watch-scraping',
            metadata
          );
        }
      }

      return null;
    } catch (error) {
      console.error("YouTube watch method failed:", error);
      return null;
    }
  }

  private async methodYouTubeAPI(videoId: string, videoUrl: string, options: TranscriptOptions): Promise<Response | null> {
    try {
      console.log("Attempting YouTube Data API v3...");
      
      const apiKey = Deno.env.get('YOUTUBE_API_KEY');
      if (!apiKey) {
        console.log("YouTube API key not found, skipping API method");
        return null;
      }

      // Get video details
      const videoResponse = await fetch(
        `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${apiKey}&part=snippet`
      );

      if (!videoResponse.ok) {
        throw new Error(`YouTube API error: ${videoResponse.status}`);
      }

      const videoData = await videoResponse.json();
      
      if (!videoData.items || videoData.items.length === 0) {
        throw new Error("Video not found");
      }

      // Try to get captions list
      const captionsResponse = await fetch(
        `https://www.googleapis.com/youtube/v3/captions?videoId=${videoId}&key=${apiKey}&part=snippet`
      );

      if (captionsResponse.ok) {
        const captionsData = await captionsResponse.json();
        
        if (captionsData.items && captionsData.items.length > 0) {
          // Create metadata for the placeholder content
          const metadata = {
            videoId,
            title: videoData.items[0].snippet.title,
            author: videoData.items[0].snippet.channelTitle,
            url: videoUrl,
            language: captionsData.items[0].snippet.language || 'en',
            extractionMethod: 'youtube-api-detection'
          };

          // Note: API method can detect captions but downloading requires OAuth
          const placeholderContent = `Captions detected for this video but content extraction requires OAuth authentication. The video "${metadata.title}" by ${metadata.author} has ${captionsData.items.length} caption track(s) available. Try using the direct caption API methods instead for automatic extraction.`;
          
          return await this.contentParser.processTranscriptContent(
            placeholderContent,
            'youtube-api',
            metadata
          );
        }
      }

      return null;
    } catch (error) {
      console.error("YouTube API method failed:", error);
      return null;
    }
  }

  private async methodYouTubeEmbed(videoId: string, videoUrl: string, options: TranscriptOptions): Promise<Response | null> {
    try {
      console.log("Attempting YouTube embed scraping...");
      
      const embedUrl = `https://www.youtube.com/embed/${videoId}`;
      const response = await fetch(embedUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      if (response.ok) {
        const html = await response.text();
        
        // Look for any caption data in embed page
        console.log("Embed page loaded, but caption extraction not yet implemented");
        
        // This method could be expanded to extract captions from embed pages
        // For now, it serves as a fallback placeholder
      }

      return null;
    } catch (error) {
      console.error("Embed method failed:", error);
      return null;
    }
  }

  private async getVideoMetadata(videoId: string): Promise<{ title: string; author: string }> {
    try {
      const watchResponse = await fetch(`https://www.youtube.com/watch?v=${videoId}`, {
        headers: { 
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' 
        }
      });
      
      if (watchResponse.ok) {
        const watchHtml = await watchResponse.text();
        return {
          title: extractVideoTitle(watchHtml),
          author: extractChannelName(watchHtml)
        };
      }
    } catch (e) {
      console.log("Failed to fetch video metadata:", e.message);
    }
    
    return {
      title: 'Unknown Video',
      author: 'Unknown Channel'
    };
  }

  private createErrorResponse(message: string, status: number): Response {
    const errorMarkdown = `# ❌ Transcript Fetch Error

**Error:** ${message}
**Status:** ${status}
**Type:** Error Response
**Imported:** ${new Date().toLocaleString('en-US', {
      month: 'numeric',
      day: 'numeric', 
      year: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
      second: '2-digit',
      hour12: true
    })}

---

## 📝 Troubleshooting

The transcript could not be fetched for this video. This could be due to:

- Video does not have captions/subtitles enabled
- Captions are disabled by the video creator
- Video is private or restricted
- Video has been removed or is unavailable
- Network connectivity issues

Try using a different YouTube video that you know has captions enabled.

---

## 📝 My Notes
Add your notes about this error here...`;

    return new Response(
      JSON.stringify({ 
        success: false, 
        error: message,
        transcript: errorMarkdown,
        metadata: {
          videoId: '',
          title: 'Error',
          author: '',
          url: '',
          language: '',
          duration: 0,
          segmentCount: 0,
          extractionMethod: 'error',
          hasTimestamps: false,
          source: 'error'
        }
      }),
      {
        status,
        headers: { ...corsHeaders, "Content-Type": "application/json" }
      }
    );
  }
}
